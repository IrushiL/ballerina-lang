NAME
       ballerina interop-gen - A CLI tool for generating jBallerina interop functions from Java libraries.

SYNOPSIS
       ballerina interop-gen (<module-name>|<bal-file-path>) -cn=<class-name> [ Options ]
       ballerina interop-gen <-h|--help>


DESCRIPTION
       A CLI tool for generating jBallerina interop functions for a specified Java class residing inside
       standard Java libraries, libraries used by the Ballerina SDK (bre/lib), dependencies specified in
       a projectâ€™s Ballerina.toml (if the tool is run inside a project) or from a specified .jar file.


OPTIONS
       -h, --help
           Print usage details of the command.

       -cn=<class-name>, --class-name=<class-name>
           The fully qualified name of the class to be used in the interop generation.

       -m=<method-name>..., --method=<method-name>...
           The list of comma-delimited methods to be used for the interop generation.

       -f=<field-name>..., --field=<field-name>...
           The list of comma-delimited fields to be used for the interop generation.

       -c, --constructor
           The option to generate interop code for constructors.

       --alias=<alias-name>
           The alias that is used to represent the fully qualified name of a class in interop functions.
           This alias will be used as a prefix in each interop function name.

       --jar=<jar-path>
           The path to the .jar file from which the interop functions are to be generated.

EXAMPLES
       Add interops to a single .bal file using a standard Java library.
          $ ballerina interop-gen main.bal -cn=java.util.UUID -m=randomUUID --alias=uuid

       Generate interop code from a standard Java library into a module.
          $ ballerina interop-gen module1 -cn=java.lang.Math -f=PI --alias=math

       Generate interop code for for an entire Java class.
          $ ballerina interop-gen module1 -cn=java.security.cert.Certificate

       Generate interop code from an external .jar file.
          $ ballerina interop-gen module1 -cn=org.apache.activemq.jndi.ActiveMQInitialContextFactory
          -m=getInitialContext --jar=lib/activemq-all-5.15.11.jar --alias=contextFactory
